rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Role helpers: check custom claims first, then fall back to Firestore users/{uid}.role
    function hasRoleOrSynonyms(target) {
      return request.auth != null && (
        request.auth.token.role == target ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == target ||
        // Accept 'superadmin' as a synonym for 'super_admin'
        (target == 'super_admin' && (
          request.auth.token.role == 'superadmin' ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin'
        ))
      );
    }

    // Helper function to check if user is a super_admin
    function isSuperAdmin() {
      return hasRoleOrSynonyms('super_admin');
    }
    
    // Helper function to check if user is admin or super_admin
    function isAdmin() {
      return hasRoleOrSynonyms('admin') || hasRoleOrSynonyms('super_admin');
    }
    
    // User collection rules - allow authenticated users to read all user data for department schedules
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (request.auth.uid == userId || isAdmin());
      // Allow authenticated users to update schedules (user management functionality)
      allow update: if request.auth != null && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['schedule', 'updatedAt']);
    }
    
    // User settings collection rules - allow users to read/write their own settings
    match /users_settings/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow write: if request.auth != null && (request.auth.uid == userId || isAdmin());
    }
    
    // Attendance collection rules
    match /attendance/{document} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Registration requests collection rules
    match /registration_requests/{requestId} {
      // Allow the owner to read their own request; admins can read all
      allow read: if isSuperAdmin() || (request.auth != null && resource.data.userId == request.auth.uid);
      allow create: if request.auth != null;
      allow update, delete: if isSuperAdmin();
    }
    
    // Declined registrations collection rules
    match /declined_registrations/{requestId} {
      // Allow the owner to read their own declined record; admins can manage all
      allow read: if isSuperAdmin() || (request.auth != null && resource.data.userId == request.auth.uid);
      allow create, update, delete: if isSuperAdmin();
    }
    
    // System settings collection rules
    match /system_settings/{document} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // SystemSettings collection rules (camelCase variant)
    match /systemSettings/{document} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // System logs collection rules
    match /system_logs/{document} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
    
    // Companies collection rules
    match /companies/{document} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Departments collection rules
    match /departments/{document} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Schedules collection rules
    match /schedules/{document} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Absences collection rules
    match /absences/{document} {
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
      allow write: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
    }
    
    // Requests collection rules
    match /requests/{document} {
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
      allow write: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
    }
    
    // Rules collection rules
    match /rules/{document} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Schedule change requests collection rules
    match /schedule_change_requests/{document} {
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
      allow write: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if request.auth != null;
    }
    
    // Email aliases collection rules
    match /email_aliases/{alias} {
      // Allow unauthenticated get for login-time alias resolution
      allow get: if true;
      
      // Prevent enumeration of aliases
      allow list: if false;
      
      // Authenticated users: owners and admins can read
      allow read: if request.auth != null && (isAdmin() || resource.data.primaryUid == request.auth.uid);
      
      // Create by owner or admin
      allow create: if request.auth != null && (isAdmin() || request.resource.data.primaryUid == request.auth.uid);
      
      // Update by owner or admin; primaryUid must not change
      allow update: if request.auth != null && (isAdmin() || resource.data.primaryUid == request.auth.uid) &&
        request.resource.data.primaryUid == resource.data.primaryUid;
      
      // Delete by owner or admin
      allow delete: if request.auth != null && (isAdmin() || resource.data.primaryUid == request.auth.uid);
    }
  }
}
